#!/usr/bin/python
# -*- coding: utf-8 -*-

# argparse muss vor dem GStreamer-Import ausgeführt werden
# (welcher in dacapo stattfindet)
# da sonst der Hilfetext von GStreamer überschrieben wird.
# Dehalb wird die gesamte Argparse-Aufbereitung hier schon einmal
# durchgeführt. Ein Auslagern in das dacapoHelp-Mddul brachte leider
# keine Besserung...
import sys
# -------------------------------------------------------------------- #
#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
	this module is used to print the help-messages and to
	create the argparse- and config-objects.
	it also checks, if the path for the log-file is
	set properly in the configuration-file.
'''
import gettext
t = gettext.translation('dacapo', "/usr/share/locale/")
t.install()

SHOWPIC_CHOICES = ["NO", "coverOnly", "allCover", "allPics",
	"diaShowAllCover", "diaShowAllPics", "help"]
import argparse as myArg
from dacapo import errorhandling
import os, sys
try:
	from dacapo.config import readconfig
except ImportError, err:
	errorhandling.Error.show()
	sys.exit(2)

oConfig = readconfig.getConfigObject()

try : 
	if not os.path.isdir(os.path.dirname(oConfig.getConfig('debug', ' ', 'logFile'))) :
		raise Exception(_('The logfile-path: {!s} is missing. Please check the configuration.').format(os.path.dirname(oConfig.getConfig('debug', ' ', 'logFile'))))
except :
	errorhandling.Error.show()
	sys.exit(2)

# argparse muss vor dem GStreamer-Import ausgeführt werden
# (welcher in dacapo stattfindet)
# da sonst der Hilfetext von GStreamer überschrieben wird.

parser = myArg.ArgumentParser(description=_('Lightweight-Music-Player, who plays FLAC- or MP3-file and shows CD-cover, pictures and metadata, as well as song-lyrics (as a picture and/or synced).'))
parser.add_argument("-R", "--resume", help=_('start on the last position from the last playlist'), action="store_true")
parser.add_argument("-NG", "--nogui", help=_('show no metadata, pictures etc.'), action="store_true")
parser.add_argument("-pl", "--playlist", help=_('the given file is a playlist'), action="store_true")

windowGroup = parser.add_mutually_exclusive_group()
windowGroup.add_argument("-fs", "--fullscreen", help=_('show the ui in fullscreen mode'), action="store_true")
windowGroup.add_argument("-w", "--window", help=_('show the ui in window mode'), action="store_true")

parser.add_argument("-s", "--shuffle", help=_('play the songs from the playlist in random order'), action="store_true")
parser.add_argument("-nrg", "--noReplayGain", help=_('do not use ReplayGain'), action="store_true")

lyricGroup = parser.add_mutually_exclusive_group()
lyricGroup.add_argument("-lp", "--showLyricAsPic", help=_('show song lyrics as pictures'), action="store_true")
lyricGroup.add_argument("-nlp", "--showLyricNotAsPic", help=_('do not show song lyrics as pictures'), action="store_true")

syncedGroup = parser.add_mutually_exclusive_group()
syncedGroup.add_argument("-sl", "--showSyncedLyrics", help=_('show synced song lyrics (like karaoke)'), action="store_true")
syncedGroup.add_argument("-nsl", "--showNotSyncedLyrics", help=_('do not show synced song lyrics (like karaoke)'), action="store_true")

parser.add_argument("--showPics", help=_('show pictures. Type "--showPics help"  to get a list of possible options.'), choices=SHOWPIC_CHOICES )
parser.add_argument("--fullhelp", help=_('show a long help message'), action="store_true")
parser.add_argument("--fonthelp", help=_('show available fonts'), action="store_true")
parser.add_argument("FILE", help=_('the file(s) or playlist(s) which should be played'), nargs='*')
parser.parse_args()


# -------------------------------------------------------------------- #
# from dacapo import dacapoHelp

if __name__ == "__main__":

	if len(sys.argv) < 2:
		from dacapo import dacapoui
		dacapoui.main()
		exit()
	from dacapo import dacapo
	dacapo.play()

